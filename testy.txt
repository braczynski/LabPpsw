*łańcuchy 
int main(void) {
    //TEST COPYSTRING
    char cSource[6] = "grzyb";
    char cDestination[8] = "ek";

    //TEST COMPRESULT
    char comparesource1[11] = "podgrzybek";
    char comparesource2[11] = "podgrzybek";

    //TEST APPENDSTRING
    char acSource[14] = "Jak sie masz?";
    char acDestination[30] = "Czesc";

    //TEST REPLACE
    char source[8] = "Kapitan";
    char oldchar = 'a';
    char newchar = 'g';

    CopyString(cSource, cDestination);
    eCompareString(comparesource1, comparesource2;
    AppendString(acSource, acDestination);
    ReplaceCharactersInString(source, oldchar, newchar);
    return 0;
}
*konewrsja
int main(void) {

    //TEST1
    char cAfterConverion[7];

    UIntToHexStr(38476, cAfterConverion);


    //TEST2
    enum Result iReturnResult;
    unsigned int uiReturnValue;

    iReturnResult = eHexStringToUInt("0xB9A", &uiReturnValue);


    //TEST3
    char cOryginal[15] = "test1";

    AppendUIntToString(38476,cOryginal);


    return 0;
}


#define NULL 0
#include <stdio.h>

void CopyString(char pcSource[], char pcDestination[]) {

    unsigned char ucCharacterCounter;

    for (ucCharacterCounter = 0; pcSource[ucCharacterCounter] != NULL; ucCharacterCounter++) {
        pcDestination[ucCharacterCounter] = pcSource[ucCharacterCounter];
    }

    pcDestination[ucCharacterCounter] = NULL;
}

enum CompResult {
    DIFFERENT = 0,
    EQUAL = 1
};

enum CompResult eCompareString(char pcStr1[], char pcStr2[]) {

    unsigned char ucCharacterCounter;

    for (ucCharacterCounter = 0; pcStr1[ucCharacterCounter] != NULL; ucCharacterCounter++) {
        if (pcStr1[ucCharacterCounter] != pcStr2[ucCharacterCounter]) {
            return DIFFERENT;
        }
    }
    return EQUAL;
}

void AppendString (char pcSourceStr[], char pcDestinationStr[]) {

    unsigned char ucCharacterCounter;

    for (ucCharacterCounter = 0; pcDestinationStr[ucCharacterCounter] != NULL; ucCharacterCounter++) {

    }

    CopyString(pcSourceStr, (pcDestinationStr + (ucCharacterCounter)));
}

void ReplaceCharactersInString(char pcString[], char cOldChar, char cNewChar) {

    unsigned char ucCharacterCounter;

    for (ucCharacterCounter = 0; pcString[ucCharacterCounter] != NULL; ucCharacterCounter++) {
        if (pcString[ucCharacterCounter] == cOldChar) {
            pcString[ucCharacterCounter] = cNewChar;
        }
    }
}

void UIntToHexStr(unsigned int uiValue, char pcStr[]) {

    unsigned char ucNibbleCounter;
    unsigned char ucCurrentNibble;

    pcStr[0] = '0';
    pcStr[1] = 'x';
    pcStr[6] = NULL;
    for(ucNibbleCounter = 0 ; ucNibbleCounter < 4 ; ucNibbleCounter++) {
        ucCurrentNibble = (uiValue >> (ucNibbleCounter * 4)) & 0x0F;
        if(ucCurrentNibble<10)
        {
            pcStr[5 - ucNibbleCounter] = '0' + ucCurrentNibble;
        }
        else
        {
            pcStr[5 - ucNibbleCounter] = 'A' + (ucCurrentNibble - 10);
        }
    }
}

enum Result {
    OK = 0,
    ERROR = 1
};

enum Result eHexStringToUInt(char pcStr[], unsigned int *puiValue) {

    unsigned char ucCurrentCharacter;
    unsigned char ucCharacterCounter;

    *puiValue = 0;

    if ((pcStr[0] != '0') || (pcStr[1] != 'x') || (pcStr[2] == NULL)) {
        return ERROR;
    }

    for (ucCharacterCounter = 2; pcStr[ucCharacterCounter] !=NULL; ucCharacterCounter++) {
        ucCurrentCharacter = pcStr[ucCharacterCounter];
        if (ucCharacterCounter == 6)
        {
            return ERROR;
        }
        *puiValue = *puiValue << 4;
        if((ucCurrentCharacter <= '9') && (ucCurrentCharacter >= '0'))
        {
            *puiValue = (*puiValue) | (ucCurrentCharacter - '0');
        }
        else if((ucCurrentCharacter <= 'F') && (ucCurrentCharacter >= 'A'))
        {
            *puiValue = (*puiValue) | (ucCurrentCharacter - 'A' + 10);
        }
        else
        {
            return ERROR;
        }
    }
    return OK;
}

void AppendUIntToString (unsigned int uiValue, char pcDestinationStr[]) {

    unsigned char ucArrayEndCounter;

    for(ucArrayEndCounter=0; pcDestinationStr[ucArrayEndCounter] != NULL; ucArrayEndCounter++) {

    }

    UIntToHexStr(uiValue, (pcDestinationStr + ucArrayEndCounter));
}


int main(void) {

    //TEST1
    char cAfterConverion[7];

    UIntToHexStr(38476, cAfterConverion);


    //TEST2
    enum Result iReturnResult;
    unsigned int uiReturnValue;

    iReturnResult = eHexStringToUInt("0xB9A", &uiReturnValue);


    //TEST3
    char cOryginal[15] = "test1";

    AppendUIntToString(38476,cOryginal);


    return 0;
}
